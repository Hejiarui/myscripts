#!/bin/bash

set -e
set -o xtrace
temp_dir=`mktemp`; rm -rf $temp_dir; mkdir -p $temp_dir
				#to mount qcow2 on this temp_dir
TOPDIR=$(cd $(dirname "$0") && pwd)	#save dir of this sh in

function _create_mac_file(){		#create MAC address config file
mac_temp=$TOPDIR/mac_temp
cat <<"EOF" >$mac_temp
# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x8086:/sys/devices/pci0000:00/0000:00:19.0 (e1000e)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="%MAC%", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
EOF
}

function _create_dns_file(){
dns_temp=$TOPDIR/dns_temp
cat <<"EOF" >$dns_temp
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
nameserver 8.8.8.8
EOF
}

:<<NATnoNEED
function _create_net_file(){		#to create ip for vm
net_temp=$TOPDIR/net_temp
cat <<"EOF" >$net_temp
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp
EOF
}
NATnoNEED

function __mount_qcow2_disk(){		#mount qcow2 file, need one argument: name of qcow2 file
	modprobe nbd max_part=63	#active nbd mod
	qemu-nbd -c /dev/nbd0 $TOPDIR/ubuntu-demo-$1.qcow2   #mount qcow2 file to device /dev/nbd0
	sleep 4
	kpartx -a /dev/nbd0
	sleep 4
	mount /dev/mapper/nbd0p1 $temp_dir
}

function __umount_qcow2_disk(){
	umount $temp_dir
	qemu-nbd -d /dev/nbd0
	for n in `ls /dev/mapper | grep -v control | grep -v nbd`; do
		dmsetup clear /dev/mapper/$n
		dmsetup remove /dev/mapper/$n
	done

	for n in `ls /dev/mapper | grep -v control | sort -r`; do
		dmsetup clear /dev/mapper/$n
		dmsetup remove /dev/mapper/$n
	done
	
	rmmod nbd
}

function _create_image(){	#accept 2 arguments: IP,  MAC of eth0
	ip=$1; mac=$2; HOST_NAME=ubuntu-demo-${ip}
	
	qemu-img create -f qcow2 -o \
		 cluster_size=2M,backing_file=$TOPDIR/ubuntu-14.04.raw ubuntu-demo-$ip.qcow2 20G
	__mount_qcow2_disk $ip

	mac_file=$temp_dir/etc/udev/rules.d/70-persistent-net.rules
	net_file=$temp_dir/etc/network/interfaces
	dns_file=$temp_dir/etc/resolv.conf

	cp -rf $TOPDIR/mac_temp $mac_file
	cp -rf $TOPDIR/net_temp $net_file
	cp -rf $TOPDIR/dns_temp $dns_file

	sed -i "s,%MAC%,$mac,g"		$mac_file
	sed -i "s,127.0.1.1.*,127.0.1.1        $HOST_NAME,g" $temp_dir/etc/hosts
	
	echo "$HOST_NAME" > $temp_dir/etc/hosts
	__umount_qcow2_disk
}

function create_xml(){		#layout xml file, get 1 argument: ip of VM
	ip=$1
	xml_file=ubuntu-demo-${ip}.xml

	cp -rf $TOPDIR/template.xml $xml_file
	sed -i "s,%VM_NAME%,ubuntu-demo-${i},g" $xml_file
	UUID=`uuidgen`
	sed -i "s,%UUID%,$UUID,g" $xml_file
	MAC="52:54:$(dd if=/dev/urandom count=1 2>/dev/null | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')"
	sed -i "s,%MAC%,$MAC,g" $xml_file	#sed mac address of eth0
	
	_create_image $ip $MAC
	IMAGE_PATH="${TOPDIR}/ubuntu-demo-${i}.qcow2"
	sed -i "s,%IMAGE_PATH%,$IMAGE_PATH,g" $xml_file
}

_create_mac_file
_create_dns_file
for ((i=1;i<=20;i++));do
	create_xml $i
	virsh define ubuntu-demo-${i}.xml
	virsh start ubuntu-demo-${i}
done

set +o xtrace

